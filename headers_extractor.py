# headers_extractor.py ‚Äî –§–∏–Ω–∞–ª—å–Ω–∞—è –û–û–ü-–≤–µ—Ä—Å–∏—è

from playwright.sync_api import sync_playwright
import logging
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional
import sys
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ parser_v2
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from parser_v2 import main as run_parser_v2


class BaseExtractor(ABC):
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –≤–µ–±-—Å–∞–π—Ç–æ–≤.
    –†–µ–∞–ª–∏–∑—É–µ—Ç –æ–±—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞, –Ω–∞–≤–∏–≥–∞—Ü–∏—è, –ø–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.
    """

    def __init__(self, headless: bool = True):
        self.headless = headless
        self.browser = None
        self.context = None
        self.page = None
        self.captured_data = {
            "url": None,
            "headers": None,
            "body": None
        }

    @abstractmethod
    def get_target_keywords(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ URL –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'search', 'api')"""
        pass

    @abstractmethod
    def get_start_url(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π URL"""
        pass

    @abstractmethod
    def navigate_and_trigger(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –Ω–∞–≤–∏–≥–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω—É–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        pass

    def setup_browser(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –∏ —Å–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        playwright = sync_playwright().start()
        self.browser = playwright.chromium.launch(headless=self.headless)
        self.context = self.browser.new_context(
            viewport={'width': 1366, 'height': 768},
            user_agent=(
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                "(KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            )
        )
        self.page = self.context.new_page()
        logger.info("üåê –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")

    def setup_route_handler(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        def handle_route(route, request):
            url = request.url.lower()
            keywords = [k.lower() for k in self.get_target_keywords()]

            if any(keyword in url for keyword in keywords) and request.method == "POST":
                logger.info(f"üéØ –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω —Ü–µ–ª–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å: {request.url}")
                self.captured_data["url"] = request.url
                self.captured_data["headers"] = dict(request.headers)
                self.captured_data["body"] = request.post_data
            route.continue_()

        self.page.route("**/*", handle_route)
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")

    def wait_for_api_response(self, timeout: int = 15000):
        """–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"""
        try:
            self.page.wait_for_response(
                lambda resp: (
                    any(k.lower() in resp.url.lower() for k in self.get_target_keywords())
                    and resp.status == 200
                ),
                timeout=timeout
            )
            logger.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç API –ø–æ–ª—É—á–µ–Ω (200 OK)")
        except Exception:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        if self.browser:
            self.browser.close()
            logger.info("üõë –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

    def run(self) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ ‚Äî —à–∞–±–ª–æ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (Template Method)
        """
        try:
            self.setup_browser()
            self.setup_route_handler()

            logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {self.get_start_url()}")
            self.page.goto(self.get_start_url(), wait_until="domcontentloaded", timeout=30000)

            self.navigate_and_trigger()

            self.wait_for_api_response()

            return self.captured_data

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return self.captured_data
        finally:
            self.close()


class GosuslugiExtractor(BaseExtractor):
    """
    –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è https://dom.gosuslugi.ru 
    """

    def get_target_keywords(self) -> list:
        return ["examinations/public/search"]

    def get_start_url(self) -> str:
        return "https://dom.gosuslugi.ru/#!/rp"

    def navigate_and_trigger(self):
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–π—Ç–∏'...")
        self.page.wait_for_selector("button:has-text('–ù–∞–π—Ç–∏')", timeout=15000)
        logger.info("üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ '–ù–∞–π—Ç–∏'...")
        self.page.click("button:has-text('–ù–∞–π—Ç–∏')")


def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å dom.gosuslugi.ru (OO–ü –≤–µ—Ä—Å–∏—è)\n")

    extractor = GosuslugiExtractor(headless=False)
    result = extractor.run()

    if result["headers"]:
        print("\n" + "=" * 60)
        print("‚úÖ –£–°–ü–ï–®–ù–û: –ó–ê–ì–û–õ–û–í–ö–ò –ò –¢–ï–õ–û –ü–û–õ–£–ß–ï–ù–´")
        print("=" * 60)
        print(f"üîó URL: {result['url']}")
        print(f"üìÑ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {result['body']}")
        print("\nüîê –ó–ê–ì–û–õ–û–í–ö–ò:")
        important = ["user-agent", "referer", "origin", "session-guid", "state-guid", "request-guid", "cookie"]
        for key, value in result["headers"].items():
            if key.lower() in important:
                print(f"  ‚Ä¢ {key}: {value[:100]}{'...' if len(value) > 100 else ''}")
        print("=" * 60)
        print("üí° –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ parser_v2.py...")
        
        # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ parser_v2
        run_parser_v2(result["headers"])
        
    else:
        print("\n" + "‚ùå" * 40)
        print("      –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
        print("      –ü—Ä–æ–≤–µ—Ä—å: —Å–µ—Ç—å, –∫–∞–ø—á—É, –∫–Ω–æ–ø–∫—É '–ù–∞–π—Ç–∏'")
        print("‚ùå" * 40)


if __name__ == "__main__":
    main()