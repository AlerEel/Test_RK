# inspections_parser.py ‚Äî –§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø

import requests
import json
import time
import uuid
import random
from datetime import datetime, timezone
from dateutil.relativedelta import relativedelta
from abc import ABC, abstractmethod
from typing import Dict, List, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
logger = logging.getLogger(__name__)

from scripts.load_to_sqlite import SqliteLoader


class BaseAPIParser(ABC):
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ API —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    –†–µ–∞–ª–∏–∑—É–µ—Ç –æ–±—â—É—é –ª–æ–≥–∏–∫—É: –∑–∞–ø—Ä–æ—Å—ã, retry, –æ–±—Ä–∞–±–æ—Ç–∫—É, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.
    """

    def __init__(self, headers: Dict[str, str], max_retries: int = 5, max_pages: int = 50):
        self.headers = {k: v for k, v in headers.items() if v}  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
        self.max_retries = max_retries
        self.max_pages = max_pages
        self.consecutive_errors = 0
        self.max_consecutive_errors = 3

    @abstractmethod
    def get_url(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π URL API (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)"""
        pass

    @abstractmethod
    def get_params(self, page: int) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (page, itemsPerPage –∏ —Ç.–ø.)"""
        pass

    @abstractmethod
    def get_payload(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–ª–æ POST-–∑–∞–ø—Ä–æ—Å–∞ (JSON)"""
        pass

    @abstractmethod
    def process_item(self, item: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ API"""
        pass

    def get_retryable_status_codes(self) -> List[int]:
        return [408, 429, 500, 502, 503, 504, 520, 521, 522, 523, 524]

    def fetch_page(self, page: int) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        # –ß–∏—Å—Ç–∏–º URL: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –ª–∏—à–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        url = self.get_url().strip()  # üî• –ö–ª—é—á–µ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        params = self.get_params(page)
        payload = self.get_payload()

        request_headers = self.headers.copy()
        request_headers["Request-GUID"] = str(uuid.uuid4())
        request_headers["Content-Type"] = "application/json"

        retryable = self.get_retryable_status_codes()

        for attempt in range(self.max_retries):
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries} –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}")
                response = requests.post(
                    url,
                    headers=request_headers,
                    params=params,
                    json=payload,
                    timeout=30
                )
                logger.info(f"POST {url} ‚Äî —Å—Ç–∞—Ç—É—Å: {response.status_code}")

                if response.status_code == 200:
                    return response.json()

                elif response.status_code in retryable:
                    if attempt < self.max_retries - 1:
                        delay = (2 ** attempt) + random.uniform(0, 1)
                        logger.warning(f"–°—Ç–∞—Ç—É—Å {response.status_code}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f} —Å–µ–∫...")
                        time.sleep(delay)
                        continue
                    else:
                        logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                        return None
                else:
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {response.status_code}")
                    response.raise_for_status()

            except requests.exceptions.Timeout:
                if attempt < self.max_retries - 1:
                    delay = (2 ** attempt) + random.uniform(0, 1)
                    logger.warning(f"–¢–∞–π–º–∞—É—Ç. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f} —Å–µ–∫...")
                    time.sleep(delay)
                    continue
                else:
                    logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤")
                    return None

            except requests.RequestException as e:
                if attempt < self.max_retries - 1:
                    delay = (2 ** attempt) + random.uniform(0, 1)
                    logger.warning(f"–û—à–∏–±–∫–∞: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f} —Å–µ–∫...")
                    time.sleep(delay)
                    continue
                else:
                    logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {e}")
                    return None

        return None

    def run(self) -> List[Dict[str, Any]]:
        logger.info("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...")
        all_data = []
        page = 1

        while page <= self.max_pages:
            try:
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}...")
                data = self.fetch_page(page)

                if not data:
                    self.consecutive_errors += 1
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –û—à–∏–±–∫–∏ –ø–æ–¥—Ä—è–¥: {self.consecutive_errors}")
                    if self.consecutive_errors >= self.max_consecutive_errors:
                        logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å. –∫–æ–ª-–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
                        break
                    delay = min(30, 2 ** self.consecutive_errors)
                    time.sleep(delay)
                    page += 1
                    continue

                if not data.get("items"):
                    logger.info("–î–∞–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
                    break

                self.consecutive_errors = 0
                items = data["items"]
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}.")

                processed_items = []
                skipped_count = 0
                skipped_examples = []
                for item in items:
                    if not isinstance(item, dict):
                        skipped_count += 1
                        if len(skipped_examples) < 5:
                            skipped_examples.append(repr(item))
                        continue
                    try:
                        processed = self.process_item(item)
                        processed_items.append(processed)
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {e} | item: {repr(item)}")
                        continue
                if skipped_count > 0:
                    logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ—Å–ª–æ–≤–∞—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {skipped_count}")
                    if skipped_examples:
                        logger.warning(f"–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö: {skipped_examples}")

                all_data.extend(processed_items)
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(processed_items)} –∑–∞–ø–∏—Å–µ–π.")

                if len(items) < 1000:
                    logger.info("–ú–µ–Ω—å—à–µ 1000 –∑–∞–ø–∏—Å–µ–π ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é.")
                    break

                page += 1
                time.sleep(1)

            except KeyboardInterrupt:
                logger.info("–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                break
            except Exception as e:
                self.consecutive_errors += 1
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                if self.consecutive_errors >= self.max_consecutive_errors:
                    logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å. –∫–æ–ª-–≤–æ –æ—à–∏–±–æ–∫. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
                    break
                delay = min(30, 2 ** self.consecutive_errors)
                time.sleep(delay)
                page += 1
                continue

        return all_data

    def safe_get(self, d, key, default=''):
        return d[key] if isinstance(d, dict) and key in d else default


class GosuslugiInspectionsParser(BaseAPIParser):
    """
    –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è API –ø—Ä–æ–≤–µ—Ä–æ–∫ –ì–æ—Å—É—Å–ª—É–≥
    """

    def get_url(self) -> str:
        return "https://dom.gosuslugi.ru/inspection/api/rest/services/examinations/public/search "

    def get_params(self, page: int) -> dict:
        return {"page": page, "itemsPerPage": 1000}

    def get_payload(self) -> dict:
        now = datetime.now(timezone.utc)
        one_month_ago = now - relativedelta(days=31)

        exam_start_from = one_month_ago.strftime('%Y-%m-%dT%H:%M:%S.000Z')
        exam_start_to = now.strftime('%Y-%m-%dT%H:%M:%S.000Z')

        return {
            "numberOrUriNumber": None,
            "typeList": [],
            "examStartFrom": exam_start_from,
            "examStartTo": exam_start_to,
            "formList": [],
            "hasOffences": [],
            "isAssigned": None,
            "orderNumber": None,
            "oversightActivitiesRefList": [],
            "preceptsMade": [],
            "statusList": [],
            "typeList": []
        }

    def format_status(self, item: Dict[str, Any]) -> str:
        status = self.safe_get(item, 'status', '')
        is_assigned = self.safe_get(item, 'isAssigned', False)

        if status == "FINISHED":
            return "–ù–∞–∑–Ω–∞—á–µ–Ω–æ" if is_assigned else "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"

        status_map = {"CANCELLED": "–û—Ç–º–µ–Ω–µ–Ω–∞", "PLANNED": "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞"}
        result_status = status_map.get(status, status)

        change_info = self.safe_get(item, 'examinationChangeInfo', {})
        last_edit = self.safe_get(item, 'lastEditingDate', None)

        reason = self.safe_get(self.safe_get(change_info, 'changingBase', {}), 'name', '')

        if last_edit:
            try:
                dt = datetime.fromtimestamp(last_edit / 1000, tz=timezone.utc)
                last_edit_str = dt.strftime('%d.%m.%Y %H:%M')
            except:
                last_edit_str = ''
        else:
            last_edit_str = ''

        if reason or last_edit_str:
            additional_info = f". –ò–∑–º–µ–Ω–µ–Ω–æ. –û—Å–Ω–æ–≤–∞–Ω–∏–µ: {reason} –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {last_edit_str}"
            result_status += additional_info

        return result_status.strip()

    def format_result(self, item: Dict[str, Any]) -> str:
        examination_result = self.safe_get(item, 'examinationResult', {})
        result = self.safe_get(examination_result, 'desc', '')
        has_offence = self.safe_get(examination_result, 'hasOffence', None)
        if has_offence is None:
            has_offence = self.safe_get(item, 'hasOffence', None)

        if has_offence is True:
            return "–ù–∞—Ä—É—à–µ–Ω–∏—è –≤—ã—è–≤–ª–µ–Ω—ã (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Ñ–∞–∫—Ç—ã –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–π)"
        elif has_offence is False:
            return "–ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ"
        return result

    def process_item(self, item: Dict[str, Any]) -> Dict[str, Any]:
        try:
            subject = self.safe_get(item, 'subject', {})
            org_info = self.safe_get(subject, 'organizationInfoEnriched', {})
            registry = self.safe_get(org_info, 'registryOrganizationCommonDetailWithNsi', {})

            entity_name = self.safe_get(registry, 'shortName', '')
            ogrn = self.safe_get(registry, 'ogrn', '')
            purpose = self.safe_get(item, 'examObjective', '')
            status = self.format_status(item)
            result = self.format_result(item)
            examStartDate = self.safe_get(item, 'from', '')
        except Exception as e:
            logger.warning(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {e} | item: {repr(item)}")
            entity_name = ogrn = purpose = status = result = examStartDate = ''

        return {
            'entity_name': entity_name,
            'ogrn': ogrn,
            'purpose': purpose,
            'status': status,
            'result': result,
            'examStartDate': examStartDate
        }


def load_to_sqlite(data: List[Dict], db_path: str = 'data/inspections.db'):
    try:
        loader = SqliteLoader(db_name=db_path)
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö {db_path}...")
        loader.insert_data_from_list(data)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –≤ –ë–î.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –ë–î: {e}")


def main(headers: Dict[str, str]):
    parser = GosuslugiInspectionsParser(headers=headers)
    data = parser.run()

    if data:
        load_to_sqlite(data)
    else:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")